// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Models;
//
//    var newsPublico = NewsPublico.FromJson(jsonString);

namespace NewsParser.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Conteudo
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("fonte")]
        public string Fonte { get; set; }

        [JsonProperty("dadoId")]
        public string DadoId { get; set; }

        [JsonProperty("conteudoHTML")]
        public bool ConteudoHtml { get; set; }

        [JsonProperty("html")]
        public string Html { get; set; }

        [JsonProperty("conteudo")]
        public NewsPublico ConteudoConteudo { get; set; }
    }

    public partial class Elemento
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("nome")]
        public object Nome { get; set; }

        [JsonProperty("titulo")]
        public object Titulo { get; set; }

        [JsonProperty("numColuna")]
        public long NumColuna { get; set; }

        [JsonProperty("coluna")]
        public long Coluna { get; set; }

        [JsonProperty("ordem")]
        public long Ordem { get; set; }

        [JsonProperty("imageUrl")]
        public object ImageUrl { get; set; }

        [JsonProperty("url")]
        public object Url { get; set; }

        [JsonProperty("isAutomatica")]
        public bool IsAutomatica { get; set; }

        [JsonProperty("isPorContexto")]
        public bool IsPorContexto { get; set; }

        [JsonProperty("cacheValue")]
        public long CacheValue { get; set; }

        [JsonProperty("sempreVisivel")]
        public bool SempreVisivel { get; set; }

        [JsonProperty("ignoraContexto")]
        public bool IgnoraContexto { get; set; }

        [JsonProperty("mostraFilete")]
        public bool MostraFilete { get; set; }

        [JsonProperty("editNoLugar")]
        public bool EditNoLugar { get; set; }

        [JsonProperty("carrgeViaAjax")]
        public bool CarrgeViaAjax { get; set; }

        [JsonProperty("estilo")]
        public Estilo? Estilo { get; set; }

        [JsonProperty("tipoCaixa")]
        public TipoCaixa TipoCaixa { get; set; }

        [JsonProperty("conteudos")]
        public Conteudo[] Conteudos { get; set; }

        [JsonProperty("isToIgnorePageContext")]
        public bool IsToIgnorePageContext { get; set; }

        [JsonProperty("descricao")]
        public object Descricao { get; set; }
    }

    public partial class NewsPublico
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("titulo")]
        public string Titulo { get; set; }

        [JsonProperty("tituloNoticia")]
        public string TituloNoticia { get; set; }

        [JsonProperty("tituloOriginal")]
        public object TituloOriginal { get; set; }

        [JsonProperty("descricao")]
        public string Descricao { get; set; }

        [JsonProperty("texto")]
        public string Texto { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("multimediaPrincipal")]
        public Uri MultimediaPrincipal { get; set; }

        [JsonProperty("multimediaPrincipalLegenda")]
        public string MultimediaPrincipalLegenda { get; set; }

        [JsonProperty("hasLive")]
        public bool HasLive { get; set; }

        [JsonProperty("pontuacao")]
        public long? Pontuacao { get; set; }

        [JsonProperty("numeroComentarios")]
        public long NumeroComentarios { get; set; }

        [JsonProperty("lead")]
        public object Lead { get; set; }

        [JsonProperty("shortUrl")]
        public object ShortUrl { get; set; }

        [JsonProperty("titulo_Mobile")]
        public object TituloMobile { get; set; }

        [JsonProperty("subtitulo")]
        public object Subtitulo { get; set; }

        [JsonProperty("rubricTag")]
        public Tag RubricTag { get; set; }

        [JsonProperty("rubrica")]
        public string Rubrica { get; set; }

        [JsonProperty("rubricUrl")]
        public string RubricUrl { get; set; }

        [JsonProperty("tipo")]
        public NewsPublicoTipo? Tipo { get; set; }

        [JsonProperty("emActualizacao")]
        public bool EmActualizacao { get; set; }

        [JsonProperty("fechaComentarios")]
        public bool FechaComentarios { get; set; }

        [JsonProperty("emDirecto")]
        public bool EmDirecto { get; set; }

        [JsonProperty("facebook")]
        public long Facebook { get; set; }

        [JsonProperty("twitter")]
        public long Twitter { get; set; }

        [JsonProperty("google")]
        public long Google { get; set; }

        [JsonProperty("fonteMultimediaPrincipal")]
        public FonteMultimediaPrincipal? FonteMultimediaPrincipal { get; set; }

        [JsonProperty("palavraChave")]
        public object PalavraChave { get; set; }

        [JsonProperty("itemId")]
        public string ItemId { get; set; }

        [JsonProperty("tokenTipo")]
        public object TokenTipo { get; set; }

        [JsonProperty("numPartilhas")]
        public long NumPartilhas { get; set; }

        [JsonProperty("numComentarios")]
        public long NumComentarios { get; set; }

        [JsonProperty("html")]
        public object Html { get; set; }

        [JsonProperty("tipoLayout")]
        public TipoLayout? TipoLayout { get; set; }

        [JsonProperty("caixaId")]
        public long? CaixaId { get; set; }

        [JsonProperty("isOpinion")]
        public bool IsOpinion { get; set; }

        [JsonProperty("fullUrl")]
        public string FullUrl { get; set; }

        [JsonProperty("prioridade")]
        public object Prioridade { get; set; }

        [JsonProperty("isPreview")]
        public bool IsPreview { get; set; }

        [JsonProperty("escondeImagem")]
        public bool EscondeImagem { get; set; }

        [JsonProperty("aoMinuto")]
        public bool AoMinuto { get; set; }

        [JsonProperty("isFeature")]
        public bool IsFeature { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("cleanTitle")]
        public string CleanTitle { get; set; }

        [JsonProperty("isHtml")]
        public bool IsHtml { get; set; }

        [JsonProperty("shareUrl")]
        public string ShareUrl { get; set; }

        [JsonProperty("isImagePortait")]
        public bool IsImagePortait { get; set; }

        [JsonProperty("cardInfo")]
        public CardInfo CardInfo { get; set; }

        [JsonProperty("brand")]
        public object Brand { get; set; }

        [JsonProperty("caixaConteudo")]
        public object CaixaConteudo { get; set; }

        [JsonProperty("dataActualizacao")]
        public DateTimeOffset? DataActualizacao { get; set; }

        [JsonProperty("data")]
        public DateTimeOffset Data { get; set; }

        [JsonProperty("autores")]
        public Autore[] Autores { get; set; }

        [JsonProperty("tags")]
        public Tag[] Tags { get; set; }

        [JsonProperty("imagens")]
        public Image[] Imagens { get; set; }

        [JsonProperty("criticas")]
        public object[] Criticas { get; set; }

        [JsonProperty("videos")]
        public object[] Videos { get; set; }

        [JsonProperty("fotogalerias")]
        public object[] Fotogalerias { get; set; }

        [JsonProperty("ficheiros")]
        public object[] Ficheiros { get; set; }

        [JsonProperty("links")]
        public object[] Links { get; set; }

        [JsonProperty("infografias")]
        public object[] Infografias { get; set; }

        [JsonProperty("elementos")]
        public Elemento[] Elementos { get; set; }

        [JsonProperty("fichaTecnica")]
        public object[] FichaTecnica { get; set; }

        [JsonProperty("audios")]
        public object[] Audios { get; set; }

        [JsonProperty("charCount")]
        public long CharCount { get; set; }

        [JsonProperty("iconography")]
        public string Iconography { get; set; }

        [JsonProperty("isSponsorContent")]
        public bool IsSponsorContent { get; set; }

        [JsonProperty("isClubeP")]
        public bool IsClubeP { get; set; }

        [JsonProperty("isItemOpinion")]
        public bool IsItemOpinion { get; set; }

        [JsonProperty("isInlineMedia")]
        public bool IsInlineMedia { get; set; }

        [JsonProperty("hasManualSubtitle")]
        public bool HasManualSubtitle { get; set; }

        [JsonProperty("isMultipleRubric")]
        public bool IsMultipleRubric { get; set; }

        [JsonProperty("socialTitle")]
        public string SocialTitle { get; set; }

        [JsonProperty("isLongForm")]
        public bool IsLongForm { get; set; }

        [JsonProperty("isClosed")]
        public bool IsClosed { get; set; }

        [JsonProperty("isExclusive")]
        public bool IsExclusive { get; set; }

        [JsonProperty("satelliteName")]
        public SatelliteName SatelliteName { get; set; }

        [JsonProperty("userLibraryStatus")]
        public object UserLibraryStatus { get; set; }

        [JsonProperty("maxParagraph")]
        public long MaxParagraph { get; set; }

        [JsonProperty("isHeadline")]
        public bool IsHeadline { get; set; }

        [JsonProperty("wordCount")]
        public long WordCount { get; set; }

        [JsonProperty("extra4")]
        public object Extra4 { get; set; }

        [JsonProperty("partners")]
        public object Partners { get; set; }

        [JsonProperty("props")]
        public object Props { get; set; }
    }

    public partial class TipoCaixa
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("nome")]
        public object Nome { get; set; }

        [JsonProperty("token")]
        public Token Token { get; set; }

        [JsonProperty("isCaixaNoticia")]
        public bool IsCaixaNoticia { get; set; }

        [JsonProperty("isVariosConteudos")]
        public bool IsVariosConteudos { get; set; }

        [JsonProperty("conteudoMaximo")]
        public object ConteudoMaximo { get; set; }

        [JsonProperty("carregaSempreViaAjax")]
        public bool CarregaSempreViaAjax { get; set; }

        [JsonProperty("conteudoAleatorio")]
        public bool ConteudoAleatorio { get; set; }

        [JsonProperty("directorio")]
        public Directorio? Directorio { get; set; }

        [JsonProperty("dependeDoConteudo")]
        public bool DependeDoConteudo { get; set; }

        [JsonProperty("exportavel")]
        public bool Exportavel { get; set; }

        [JsonProperty("numMaxConteudo")]
        public object NumMaxConteudo { get; set; }

        [JsonProperty("fontes")]
        public object[] Fontes { get; set; }
    }

    public partial class Autore
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("nome")]
        public string Nome { get; set; }

        [JsonProperty("descricao")]
        public string Descricao { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("facebook")]
        public object Facebook { get; set; }

        [JsonProperty("googlePlus")]
        public object GooglePlus { get; set; }

        [JsonProperty("twitter")]
        public object Twitter { get; set; }

        [JsonProperty("site")]
        public object Site { get; set; }

        [JsonProperty("url")]
        public object Url { get; set; }

        [JsonProperty("localizacao")]
        public string Localizacao { get; set; }

        [JsonProperty("profissaoActual")]
        public Profissao? ProfissaoActual { get; set; }

        [JsonProperty("profissaoNaAltura")]
        public Profissao? ProfissaoNaAltura { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("imagem")]
        public Image Imagem { get; set; }

        [JsonProperty("hasImage")]
        public bool HasImage { get; set; }

        [JsonProperty("isExternal")]
        public bool IsExternal { get; set; }

        [JsonProperty("encodedEmail")]
        public string EncodedEmail { get; set; }

        [JsonProperty("contribuicao")]
        public string Contribuicao { get; set; }

        [JsonProperty("tipo")]
        public AutoreTipo? Tipo { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("w")]
        public long? W { get; set; }

        [JsonProperty("h")]
        public long? H { get; set; }

        [JsonProperty("largura")]
        public long? Largura { get; set; }

        [JsonProperty("altura")]
        public long? Altura { get; set; }

        [JsonProperty("nome")]
        public string Nome { get; set; }

        [JsonProperty("legenda")]
        public string Legenda { get; set; }

        [JsonProperty("autor")]
        public string Autor { get; set; }

        [JsonProperty("tipo")]
        public ImagenTipo Tipo { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("is_vertical")]
        public bool IsVertical { get; set; }

        [JsonProperty("tags")]
        public string Tags { get; set; }

        [JsonProperty("translations")]
        public object Translations { get; set; }
    }

    public partial class CardInfo
    {
        [JsonProperty("css")]
        public Css[] Css { get; set; }

        [JsonProperty("showMedia")]
        public bool ShowMedia { get; set; }

        [JsonProperty("maxLinks")]
        public long MaxLinks { get; set; }

        [JsonProperty("isHeadlineBlock")]
        public bool IsHeadlineBlock { get; set; }

        [JsonProperty("showLead")]
        public bool ShowLead { get; set; }

        [JsonProperty("mediaCss")]
        public string MediaCss { get; set; }
    }

    public partial class Tag
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("nome")]
        public string Nome { get; set; }

        [JsonProperty("slug")]
        public string Slug { get; set; }

        [JsonProperty("tagEn")]
        public TagEn TagEn { get; set; }

        [JsonProperty("isPrincipal")]
        public bool IsPrincipal { get; set; }

        [JsonProperty("isVisible")]
        public bool IsVisible { get; set; }

        [JsonProperty("urlRoute")]
        public string UrlRoute { get; set; }

        [JsonProperty("isPrincipalParaArtigo")]
        public bool IsPrincipalParaArtigo { get; set; }

        [JsonProperty("isTimeLine")]
        public bool IsTimeLine { get; set; }

        [JsonProperty("forcaConteudoAberto")]
        public bool ForcaConteudoAberto { get; set; }

        [JsonProperty("follow_type")]
        public object FollowType { get; set; }

        [JsonProperty("descricao")]
        public object Descricao { get; set; }

        [JsonProperty("imagem")]
        public object Imagem { get; set; }

        [JsonProperty("html")]
        public object Html { get; set; }

        [JsonProperty("isForForuns")]
        public bool IsForForuns { get; set; }

        [JsonProperty("isUsedInForuns")]
        public bool IsUsedInForuns { get; set; }
    }

    public enum Estilo { StoryCalloutInline };

    public enum Directorio { Empty, Highlights };

    public enum Token { ArtigoTexto, Imagem780_520, NoticiaHtml };

    public enum ImagenTipo { Jpg, Png };

    public enum Profissao { Empty, Jornalista };

    public enum AutoreTipo { Agencia, Externo, Interno };

    public enum Css { CardF, ToneNews };

    public enum FonteMultimediaPrincipal { Imagens };

    public enum TagEn { Economy, Empty };

    public enum SatelliteName { Empty, Ímpar, Ípsilon };

    public enum NewsPublicoTipo { Noticia };

    public enum TipoLayout { LongformNormal, MultimediaNormal };

    public partial class NewsPublico
    {
        public static NewsPublico[] FromJson(string json) => JsonConvert.DeserializeObject<NewsPublico[]>(json, Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this NewsPublico[] self) => JsonConvert.SerializeObject(self, Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ImagenTipoConverter.Singleton,
                ProfissaoConverter.Singleton,
                AutoreTipoConverter.Singleton,
                CssConverter.Singleton,
                EstiloConverter.Singleton,
                DirectorioConverter.Singleton,
                TokenConverter.Singleton,
                FonteMultimediaPrincipalConverter.Singleton,
                TagEnConverter.Singleton,
                SatelliteNameConverter.Singleton,
                NewsPublicoTipoConverter.Singleton,
                TipoLayoutConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ImagenTipoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ImagenTipo) || t == typeof(ImagenTipo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "JPG":
                    return ImagenTipo.Jpg;
                case "PNG":
                    return ImagenTipo.Png;
            }
            throw new Exception("Cannot unmarshal type ImagenTipo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ImagenTipo)untypedValue;
            switch (value)
            {
                case ImagenTipo.Jpg:
                    serializer.Serialize(writer, "JPG");
                    return;
                case ImagenTipo.Png:
                    serializer.Serialize(writer, "PNG");
                    return;
            }
            throw new Exception("Cannot marshal type ImagenTipo");
        }

        public static readonly ImagenTipoConverter Singleton = new ImagenTipoConverter();
    }

    internal class ProfissaoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Profissao) || t == typeof(Profissao?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Profissao.Empty;
                case "Jornalista":
                    return Profissao.Jornalista;
            }
            throw new Exception("Cannot unmarshal type Profissao");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Profissao)untypedValue;
            switch (value)
            {
                case Profissao.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Profissao.Jornalista:
                    serializer.Serialize(writer, "Jornalista");
                    return;
            }
            throw new Exception("Cannot marshal type Profissao");
        }

        public static readonly ProfissaoConverter Singleton = new ProfissaoConverter();
    }

    internal class AutoreTipoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(AutoreTipo) || t == typeof(AutoreTipo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "AGENCIA":
                    return AutoreTipo.Agencia;
                case "EXTERNO":
                    return AutoreTipo.Externo;
                case "INTERNO":
                    return AutoreTipo.Interno;
            }
            throw new Exception("Cannot unmarshal type AutoreTipo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (AutoreTipo)untypedValue;
            switch (value)
            {
                case AutoreTipo.Agencia:
                    serializer.Serialize(writer, "AGENCIA");
                    return;
                case AutoreTipo.Externo:
                    serializer.Serialize(writer, "EXTERNO");
                    return;
                case AutoreTipo.Interno:
                    serializer.Serialize(writer, "INTERNO");
                    return;
            }
            throw new Exception("Cannot marshal type AutoreTipo");
        }

        public static readonly AutoreTipoConverter Singleton = new AutoreTipoConverter();
    }

    internal class CssConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Css) || t == typeof(Css?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "card--f":
                    return Css.CardF;
                case "tone--news":
                    return Css.ToneNews;
            }
            throw new Exception("Cannot unmarshal type Css");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Css)untypedValue;
            switch (value)
            {
                case Css.CardF:
                    serializer.Serialize(writer, "card--f");
                    return;
                case Css.ToneNews:
                    serializer.Serialize(writer, "tone--news");
                    return;
            }
            throw new Exception("Cannot marshal type Css");
        }

        public static readonly CssConverter Singleton = new CssConverter();
    }

    internal class EstiloConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Estilo) || t == typeof(Estilo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "story__callout--inline")
            {
                return Estilo.StoryCalloutInline;
            }
            throw new Exception("Cannot unmarshal type Estilo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Estilo)untypedValue;
            if (value == Estilo.StoryCalloutInline)
            {
                serializer.Serialize(writer, "story__callout--inline");
                return;
            }
            throw new Exception("Cannot marshal type Estilo");
        }

        public static readonly EstiloConverter Singleton = new EstiloConverter();
    }

    internal class DirectorioConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Directorio) || t == typeof(Directorio?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Directorio.Empty;
                case "/Highlights":
                    return Directorio.Highlights;
            }
            throw new Exception("Cannot unmarshal type Directorio");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Directorio)untypedValue;
            switch (value)
            {
                case Directorio.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Directorio.Highlights:
                    serializer.Serialize(writer, "/Highlights");
                    return;
            }
            throw new Exception("Cannot marshal type Directorio");
        }

        public static readonly DirectorioConverter Singleton = new DirectorioConverter();
    }

    internal class TokenConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Token) || t == typeof(Token?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ARTIGO_TEXTO":
                    return Token.ArtigoTexto;
                case "IMAGEM_780_520":
                    return Token.Imagem780_520;
                case "NOTICIA_HTML":
                    return Token.NoticiaHtml;
            }
            throw new Exception("Cannot unmarshal type Token");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Token)untypedValue;
            switch (value)
            {
                case Token.ArtigoTexto:
                    serializer.Serialize(writer, "ARTIGO_TEXTO");
                    return;
                case Token.Imagem780_520:
                    serializer.Serialize(writer, "IMAGEM_780_520");
                    return;
                case Token.NoticiaHtml:
                    serializer.Serialize(writer, "NOTICIA_HTML");
                    return;
            }
            throw new Exception("Cannot marshal type Token");
        }

        public static readonly TokenConverter Singleton = new TokenConverter();
    }

    internal class FonteMultimediaPrincipalConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FonteMultimediaPrincipal) || t == typeof(FonteMultimediaPrincipal?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "IMAGENS")
            {
                return FonteMultimediaPrincipal.Imagens;
            }
            throw new Exception("Cannot unmarshal type FonteMultimediaPrincipal");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FonteMultimediaPrincipal)untypedValue;
            if (value == FonteMultimediaPrincipal.Imagens)
            {
                serializer.Serialize(writer, "IMAGENS");
                return;
            }
            throw new Exception("Cannot marshal type FonteMultimediaPrincipal");
        }

        public static readonly FonteMultimediaPrincipalConverter Singleton = new FonteMultimediaPrincipalConverter();
    }

    internal class TagEnConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TagEn) || t == typeof(TagEn?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return TagEn.Empty;
                case "Economy":
                    return TagEn.Economy;
            }
            throw new Exception("Cannot unmarshal type TagEn");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TagEn)untypedValue;
            switch (value)
            {
                case TagEn.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case TagEn.Economy:
                    serializer.Serialize(writer, "Economy");
                    return;
            }
            throw new Exception("Cannot marshal type TagEn");
        }

        public static readonly TagEnConverter Singleton = new TagEnConverter();
    }

    internal class SatelliteNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SatelliteName) || t == typeof(SatelliteName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return SatelliteName.Empty;
                case "Ímpar":
                    return SatelliteName.Ímpar;
                case "Ípsilon":
                    return SatelliteName.Ípsilon;
            }
            throw new Exception("Cannot unmarshal type SatelliteName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SatelliteName)untypedValue;
            switch (value)
            {
                case SatelliteName.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case SatelliteName.Ímpar:
                    serializer.Serialize(writer, "Ímpar");
                    return;
                case SatelliteName.Ípsilon:
                    serializer.Serialize(writer, "Ípsilon");
                    return;
            }
            throw new Exception("Cannot marshal type SatelliteName");
        }

        public static readonly SatelliteNameConverter Singleton = new SatelliteNameConverter();
    }

    internal class NewsPublicoTipoConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NewsPublicoTipo) || t == typeof(NewsPublicoTipo?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "NOTICIA")
            {
                return NewsPublicoTipo.Noticia;
            }
            throw new Exception("Cannot unmarshal type NewsPublicoTipo");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NewsPublicoTipo)untypedValue;
            if (value == NewsPublicoTipo.Noticia)
            {
                serializer.Serialize(writer, "NOTICIA");
                return;
            }
            throw new Exception("Cannot marshal type NewsPublicoTipo");
        }

        public static readonly NewsPublicoTipoConverter Singleton = new NewsPublicoTipoConverter();
    }

    internal class TipoLayoutConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TipoLayout) || t == typeof(TipoLayout?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "LONGFORM_NORMAL":
                    return TipoLayout.LongformNormal;
                case "MULTIMEDIA_NORMAL":
                    return TipoLayout.MultimediaNormal;
            }
            throw new Exception("Cannot unmarshal type TipoLayout");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TipoLayout)untypedValue;
            switch (value)
            {
                case TipoLayout.LongformNormal:
                    serializer.Serialize(writer, "LONGFORM_NORMAL");
                    return;
                case TipoLayout.MultimediaNormal:
                    serializer.Serialize(writer, "MULTIMEDIA_NORMAL");
                    return;
            }
            throw new Exception("Cannot marshal type TipoLayout");
        }

        public static readonly TipoLayoutConverter Singleton = new TipoLayoutConverter();
    }
}
